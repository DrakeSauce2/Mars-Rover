//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/_MyFiles/Input/IA_Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @IA_Player: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @IA_Player()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""IA_Player"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""ff304bbb-9e3d-458e-8121-2aa7b6a51931"",
            ""actions"": [
                {
                    ""name"": ""SelectLocation"",
                    ""type"": ""Button"",
                    ""id"": ""79825912-46b7-49b9-97e6-ee6aa7bfd5c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CursorPosition"",
                    ""type"": ""Value"",
                    ""id"": ""ffd091d8-db97-46b8-9ce7-74e7592ff23f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Deselect"",
                    ""type"": ""Button"",
                    ""id"": ""8f4d4779-dc59-420d-8255-a7be86217a06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ConfirmAnswer"",
                    ""type"": ""Button"",
                    ""id"": ""a6bde02b-9058-4ad4-9e14-7935804dd569"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""927a7226-b418-43ed-ba82-c68cec460d37"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectLocation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62a86dcd-6793-4e2a-ab8a-cf147e5cb06f"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CursorPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d42a85de-4783-4843-b921-31eb1d2c8004"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Deselect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24280d06-829f-4424-a907-dbba2dfbfc66"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmAnswer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_SelectLocation = m_Main.FindAction("SelectLocation", throwIfNotFound: true);
        m_Main_CursorPosition = m_Main.FindAction("CursorPosition", throwIfNotFound: true);
        m_Main_Deselect = m_Main.FindAction("Deselect", throwIfNotFound: true);
        m_Main_ConfirmAnswer = m_Main.FindAction("ConfirmAnswer", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private List<IMainActions> m_MainActionsCallbackInterfaces = new List<IMainActions>();
    private readonly InputAction m_Main_SelectLocation;
    private readonly InputAction m_Main_CursorPosition;
    private readonly InputAction m_Main_Deselect;
    private readonly InputAction m_Main_ConfirmAnswer;
    public struct MainActions
    {
        private @IA_Player m_Wrapper;
        public MainActions(@IA_Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectLocation => m_Wrapper.m_Main_SelectLocation;
        public InputAction @CursorPosition => m_Wrapper.m_Main_CursorPosition;
        public InputAction @Deselect => m_Wrapper.m_Main_Deselect;
        public InputAction @ConfirmAnswer => m_Wrapper.m_Main_ConfirmAnswer;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void AddCallbacks(IMainActions instance)
        {
            if (instance == null || m_Wrapper.m_MainActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainActionsCallbackInterfaces.Add(instance);
            @SelectLocation.started += instance.OnSelectLocation;
            @SelectLocation.performed += instance.OnSelectLocation;
            @SelectLocation.canceled += instance.OnSelectLocation;
            @CursorPosition.started += instance.OnCursorPosition;
            @CursorPosition.performed += instance.OnCursorPosition;
            @CursorPosition.canceled += instance.OnCursorPosition;
            @Deselect.started += instance.OnDeselect;
            @Deselect.performed += instance.OnDeselect;
            @Deselect.canceled += instance.OnDeselect;
            @ConfirmAnswer.started += instance.OnConfirmAnswer;
            @ConfirmAnswer.performed += instance.OnConfirmAnswer;
            @ConfirmAnswer.canceled += instance.OnConfirmAnswer;
        }

        private void UnregisterCallbacks(IMainActions instance)
        {
            @SelectLocation.started -= instance.OnSelectLocation;
            @SelectLocation.performed -= instance.OnSelectLocation;
            @SelectLocation.canceled -= instance.OnSelectLocation;
            @CursorPosition.started -= instance.OnCursorPosition;
            @CursorPosition.performed -= instance.OnCursorPosition;
            @CursorPosition.canceled -= instance.OnCursorPosition;
            @Deselect.started -= instance.OnDeselect;
            @Deselect.performed -= instance.OnDeselect;
            @Deselect.canceled -= instance.OnDeselect;
            @ConfirmAnswer.started -= instance.OnConfirmAnswer;
            @ConfirmAnswer.performed -= instance.OnConfirmAnswer;
            @ConfirmAnswer.canceled -= instance.OnConfirmAnswer;
        }

        public void RemoveCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainActions instance)
        {
            foreach (var item in m_Wrapper.m_MainActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainActions @Main => new MainActions(this);
    public interface IMainActions
    {
        void OnSelectLocation(InputAction.CallbackContext context);
        void OnCursorPosition(InputAction.CallbackContext context);
        void OnDeselect(InputAction.CallbackContext context);
        void OnConfirmAnswer(InputAction.CallbackContext context);
    }
}
